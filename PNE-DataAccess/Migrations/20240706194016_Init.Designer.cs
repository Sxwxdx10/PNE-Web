// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PNE_DataAccess;

#nullable disable

namespace PNE_DataAccess.Migrations
{
    [DbContext(typeof(ScaffoldMigrationContext))]
    [Migration("20240706194016_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "niveau", "niveau", new[] { "vert", "jaune", "rouge" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "type_lavage", "type_lavage", new[] { "eau_chaude_avec_pression", "eau_froide_avec_pression", "eau_chaude_sans_pression", "eau_froide_sans_pression" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "type_pne_id", "type_pne_id", new[] { "serial_embarcation", "serial_lavage", "serial_embarcation_utilisateur", "serial_note", "serial_plan_eau", "serial_mise_eau" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("serial_embarcation");

            modelBuilder.HasSequence("serial_embarcation_utilisateur");

            modelBuilder.HasSequence("serial_lavage");

            modelBuilder.HasSequence("serial_mise_eau");

            modelBuilder.HasSequence("serial_note");

            modelBuilder.HasSequence("serial_plan_eau");

            modelBuilder.Entity("PNE_core.Models.Certification", b =>
                {
                    b.Property<string>("CodeCertification")
                        .HasColumnType("character varying")
                        .HasColumnName("code_certification");

                    b.Property<string>("NomFormation")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("nom_formation");

                    b.HasKey("CodeCertification")
                        .HasName("certification_pkey");

                    b.ToTable("certification", (string)null);
                });

            modelBuilder.Entity("PNE_core.Models.CertificationUtilisateur", b =>
                {
                    b.Property<int>("IdCertificationUtilisateur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdCertificationUtilisateur");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCertificationUtilisateur"));

                    b.Property<string>("CodeCertification")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("IdUtilisateur")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("IdCertificationUtilisateur");

                    b.HasIndex("CodeCertification");

                    b.HasIndex("IdUtilisateur");

                    b.ToTable("CertificationUtilisateurs");
                });

            modelBuilder.Entity("PNE_core.Models.Embarcation", b =>
                {
                    b.Property<string>("IdEmbarcation")
                        .HasColumnType("character varying")
                        .HasColumnName("id_embarcation");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<int>("Longueur")
                        .HasColumnType("integer")
                        .HasColumnName("longueur");

                    b.Property<string>("Marque")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("marque");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("photo");

                    b.Property<string>("codeQR")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdEmbarcation")
                        .HasName("embarcation_pkey");

                    b.ToTable("embarcation", (string)null);
                });

            modelBuilder.Entity("PNE_core.Models.Embarcationutilisateur", b =>
                {
                    b.Property<string>("IdEmbarcationUtilisateur")
                        .HasColumnType("text")
                        .HasColumnName("id_embarcation_utilisateur");

                    b.Property<string>("IdEmbarcation")
                        .HasColumnType("character varying")
                        .HasColumnName("id_embarcation");

                    b.Property<string>("IdUtilisateur")
                        .HasColumnType("character varying")
                        .HasColumnName("id_utilisateur");

                    b.HasKey("IdEmbarcationUtilisateur");

                    b.HasIndex("IdEmbarcation");

                    b.HasIndex("IdUtilisateur");

                    b.ToTable("Embarcationutilisateurs");
                });

            modelBuilder.Entity("PNE_core.Models.Lavage", b =>
                {
                    b.Property<string>("IdLavage")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("id_lavage");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("IdEmbarcation")
                        .HasColumnType("character varying")
                        .HasColumnName("id_embarcation");

                    b.Property<bool>("SelfServe")
                        .HasColumnType("boolean")
                        .HasColumnName("self_serve");

                    b.Property<int>("TypeLavage")
                        .HasColumnType("type_lavage")
                        .HasColumnName("type_lavage");

                    b.HasKey("IdLavage")
                        .HasName("lavage_pkey");

                    b.HasIndex("IdEmbarcation");

                    b.ToTable("lavage", (string)null);
                });

            modelBuilder.Entity("PNE_core.Models.Miseaeau", b =>
                {
                    b.Property<string>("IdMiseEau")
                        .HasColumnType("text")
                        .HasColumnName("id_mise_eau");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("IdEmbarcation")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("id_embarcation");

                    b.Property<string>("IdPlanEau")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("id_plan_eau");

                    b.HasKey("IdMiseEau")
                        .HasName("miseaeau_pkey");

                    b.HasIndex("IdEmbarcation");

                    b.HasIndex("IdPlanEau");

                    b.ToTable("miseaeau", (string)null);
                });

            modelBuilder.Entity("PNE_core.Models.Notedossier", b =>
                {
                    b.Property<string>("Idnote")
                        .HasColumnType("text")
                        .HasColumnName("idnote");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("IdEmbarcation")
                        .HasColumnType("character varying")
                        .HasColumnName("id_embarcation");

                    b.Property<string>("IdPlanEau")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("id_plan_eau");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.HasKey("Idnote")
                        .HasName("notedossier_pkey");

                    b.HasIndex("IdEmbarcation");

                    b.HasIndex("IdPlanEau");

                    b.ToTable("notedossier", (string)null);
                });

            modelBuilder.Entity("PNE_core.Models.Planeau", b =>
                {
                    b.Property<string>("IdPlanEau")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("id_plan_eau");

                    b.Property<Point>("Emplacement")
                        .IsRequired()
                        .HasColumnType("geometry(Point)")
                        .HasColumnName("emplacement");

                    b.Property<int>("NiveauCouleur")
                        .HasColumnType("niveau")
                        .HasColumnName("niveau_couleur");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("nom");

                    b.HasKey("IdPlanEau")
                        .HasName("planeau_pkey");

                    b.ToTable("planeau", (string)null);
                });

            modelBuilder.Entity("PNE_core.Models.Role", b =>
                {
                    b.Property<string>("NomRole")
                        .HasColumnType("character varying")
                        .HasColumnName("nom_role");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("NomRole")
                        .HasName("role_pkey");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("PNE_core.Models.RolesUtilisateurs", b =>
                {
                    b.Property<int>("IdRolesUtilisateurs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdRolesUtilisateurs");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdRolesUtilisateurs"));

                    b.Property<string>("IdUtilisateur")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("nom_role")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("IdRolesUtilisateurs");

                    b.HasIndex("IdUtilisateur");

                    b.HasIndex("nom_role");

                    b.ToTable("RolesUtilisateurs");
                });

            modelBuilder.Entity("PNE_core.Models.Utilisateur", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_creation");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("Utilisateur");
                });

            modelBuilder.Entity("PNE_core.Models.CertificationUtilisateur", b =>
                {
                    b.HasOne("PNE_core.Models.Certification", "certification")
                        .WithMany("CertificationUtilisateur")
                        .HasForeignKey("CodeCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CertificationUtilisateur_CodeCertification");

                    b.HasOne("PNE_core.Models.Utilisateur", "Utilisateur")
                        .WithMany("CertificationUtilisateur")
                        .HasForeignKey("IdUtilisateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CertificationUtilisateur_IdUtilisateur");

                    b.Navigation("Utilisateur");

                    b.Navigation("certification");
                });

            modelBuilder.Entity("PNE_core.Models.Embarcationutilisateur", b =>
                {
                    b.HasOne("PNE_core.Models.Embarcation", "IdEmbarcationNavigation")
                        .WithMany("Embarcationutilisateurs")
                        .HasForeignKey("IdEmbarcation")
                        .HasConstraintName("embarcationutilisateur_id_embarcation_fkey");

                    b.HasOne("PNE_core.Models.Utilisateur", "UtilisateurNavigation")
                        .WithMany("Embarcationutilisateurs")
                        .HasForeignKey("IdUtilisateur")
                        .HasConstraintName("embarcationutilisateur_sub_fkey");

                    b.Navigation("IdEmbarcationNavigation");

                    b.Navigation("UtilisateurNavigation");
                });

            modelBuilder.Entity("PNE_core.Models.Lavage", b =>
                {
                    b.HasOne("PNE_core.Models.Embarcation", "EmbarcationNavigation")
                        .WithMany("Lavages")
                        .HasForeignKey("IdEmbarcation")
                        .HasConstraintName("lavage_id_embarcation_fkey");

                    b.Navigation("EmbarcationNavigation");
                });

            modelBuilder.Entity("PNE_core.Models.Miseaeau", b =>
                {
                    b.HasOne("PNE_core.Models.Embarcation", "EmbarcationNavigation")
                        .WithMany("Miseaeaus")
                        .HasForeignKey("IdEmbarcation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("miseaeau_id_embarcation_utilisateur_fkey");

                    b.HasOne("PNE_core.Models.Planeau", "IdPlanEauNavigation")
                        .WithMany("Miseaeaus")
                        .HasForeignKey("IdPlanEau")
                        .HasConstraintName("miseaeau_id_plan_eau_fkey");

                    b.Navigation("EmbarcationNavigation");

                    b.Navigation("IdPlanEauNavigation");
                });

            modelBuilder.Entity("PNE_core.Models.Notedossier", b =>
                {
                    b.HasOne("PNE_core.Models.Embarcation", "IdEmbarcationNavigation")
                        .WithMany("Notedossiers")
                        .HasForeignKey("IdEmbarcation")
                        .HasConstraintName("notedossier_id_embarcation_utilisateur_fkey");

                    b.HasOne("PNE_core.Models.Planeau", "IdPlanEauNavigation")
                        .WithMany("Notedossiers")
                        .HasForeignKey("IdPlanEau")
                        .HasConstraintName("notedossier_id_plan_eau_fkey");

                    b.Navigation("IdEmbarcationNavigation");

                    b.Navigation("IdPlanEauNavigation");
                });

            modelBuilder.Entity("PNE_core.Models.RolesUtilisateurs", b =>
                {
                    b.HasOne("PNE_core.Models.Utilisateur", "Utilisateur")
                        .WithMany("RolesUtilisateurs")
                        .HasForeignKey("IdUtilisateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolesUtilisateurs_IdUtilisateur");

                    b.HasOne("PNE_core.Models.Role", "Role")
                        .WithMany("RolesUtilisateurs")
                        .HasForeignKey("nom_role")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolesUtilisateurs_NomRole");

                    b.Navigation("Role");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("PNE_core.Models.Certification", b =>
                {
                    b.Navigation("CertificationUtilisateur");
                });

            modelBuilder.Entity("PNE_core.Models.Embarcation", b =>
                {
                    b.Navigation("Embarcationutilisateurs");

                    b.Navigation("Lavages");

                    b.Navigation("Miseaeaus");

                    b.Navigation("Notedossiers");
                });

            modelBuilder.Entity("PNE_core.Models.Planeau", b =>
                {
                    b.Navigation("Miseaeaus");

                    b.Navigation("Notedossiers");
                });

            modelBuilder.Entity("PNE_core.Models.Role", b =>
                {
                    b.Navigation("RolesUtilisateurs");
                });

            modelBuilder.Entity("PNE_core.Models.Utilisateur", b =>
                {
                    b.Navigation("CertificationUtilisateur");

                    b.Navigation("Embarcationutilisateurs");

                    b.Navigation("RolesUtilisateurs");
                });
#pragma warning restore 612, 618
        }
    }
}
